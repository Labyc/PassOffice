openapi: 3.0.1
info:
  title: Passport office API
  description: This is a Passport office API.
  version: 1.0.0

servers:
  - url: 'http://192.168.37.200:8090'
    description: base server
tags:
  - name: Passport
    description: get/add/switch/inactivate passport
  - name: Passports
    description: Bulk add or get passports
  - name: Search
    description: Search for passport or Person
  - name: Person
    description: get/add/edit/delete Person info
  - name: Healthcheck

paths:
  /healthCheck:
    get:
      tags:
        - Healthcheck
      summary: Check API server is OK
      operationId: healthCheck
      responses:
        '200':
          description: OK
        '500':
          description: internal service error
        '400':
          description: not reachable

  /passports:
    get:
      deprecated: true
      tags:
        - Passports
      summary: Returns a list of passports.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportsList'
        '402':
          description: No Content
        '500':
          description: internal service error

    post:
      tags:
        - Passports
      summary: Post passports in bulk mode.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassportsList'
      responses:
        '200':
          description: Entities Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportsList'
        '400':
          description: Bad Request - invalid syntax
        '422':
          $ref: '#/components/responses/InvalidData'

  /search/passports:
    post:
      deprecated: true
      tags:
        - Search
      summary: Get passports by person
      operationId: getPassportByPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportsList'
        '404':
          description: Not found
        '400':
          description: Bad Request - invalid syntax
        '422':
          $ref: '#/components/responses/InvalidData'

  /search/passports/byPersonId:
    get:
      tags:
        - Search
      summary: Get passports by person's ID
      operationId: getPassportsByPersonID
      parameters:
        - name: personID
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportsList'
        '404':
          description: Not found

  /search/passports/dateRange:
    get:
      tags:
        - Search
      summary: Get passports by given date range
      operationId: getPassportsByGivenDateRange
      parameters:
        - name: startDate
          in: query
          required: true
          example: 25.03.1999
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: false
          example: 25.03.1999
          description: Will be set to today's date if not provided
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportsList'
        '404':
          description: Not found

  /newPassport:
    post:
      tags:
        - Passport
      summary: Add one new passport
      operationId: postPassport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passport'
      responses:
        '200':
          description: OK entity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passport'
        '400':
          description: Bad Request - invalid syntax
        '422':
          $ref: '#/components/responses/InvalidData'
    patch:
      tags:
        - Passport
      summary: Edit passport
      operationId: editPassport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/RFPassport'
                - $ref: '#/components/schemas/ForeignRFPassport'
                - $ref: '#/components/schemas/NonRFPassport'
              discriminator:
                propertyName: passportType
      responses:
        '200':
          description: OK, entity updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passport'
        '404':
          description: Not found
        '400':
          description: Bad Request - invalid syntax
        '422':
          $ref: '#/components/responses/InvalidData'

    put:
      tags:
        - Passport
      summary: Add new passport to swap the old one
      operationId: swapPassport
      parameters:
        - name: passportID
          in: query
          required: true
          description: Old passport ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passport'
      responses:
        '200':
          description: OK, accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passport'
        '404':
          description: Old Passport not found
        '400':
          description: Bad Request - invalid syntax
        '422':
          $ref: '#/components/responses/InvalidData'


  /passport:
    parameters:
      - name: passportID
        in: query
        description: Passport ID
        required: true
        schema:
          type: string

    get:
      tags:
        - Passport
      summary: Returns one passport
      operationId: getPassportBySeriesNumber
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passport'
        '404':
          description: Not found
    delete:
      tags:
        - Passport
      summary: Mark passport as deleted by series and number
      operationId: deletePassport
      responses:
        '200':
          description: OK, entity updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passport'
        '404':
          description: Not found


  /passport/swap:
    get:
      deprecated: true
      tags:
        - Passport
      summary: Get new passport instead of old one with the same data
      operationId: automaticSwapPassport
      parameters:
        - name: series
          in: query
          required: true
          description: Old passport series
          schema:
            type: string
            example: 1234
            pattern: '\d{4}'
            description: 4 digits
        - name: number
          in: query
          required: true
          description: Old passport number
          schema:
            type: string
            example: 123456
            pattern: '\d{6}'
            description: 6 digits
      responses:
        '200':
          description: Ok, entity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passport'
        '404':
          description: Old Passport not found

  /person:
    post:
      tags:
        - Person
      summary: add one person
      operationId: postPerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Person'
                - type: object
                  required:
                    - name
                    - surname
                    - placeOfBirth
                    - dateOfBirth
      responses:
        '200':
          description: OK, entity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request - invalid syntax
        '422':
          $ref: '#/components/responses/InvalidData'
    patch:
      tags:
        - Person
      summary: edit one person
      operationId: editPerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: OK, entity updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request - invalid syntax
        '422':
          $ref: '#/components/responses/InvalidData'
    get:
      tags:
        - Person
      summary: get persons by full name
      operationId: getPersonsByName
      parameters:
        - name: name
          in: query
          description: The name of the person
          required: true
          schema:
            type: string
        - name: surname
          in: query
          description: The surname of the person
          required: true
          schema:
            type: string
        - name: patronymic
          in: query
          description: The patronymic of the person
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '404':
          description: Not found
    delete:
      tags:
        - Person
      summary: Mark Person As deleted
      operationId: deletePerson
      parameters:
        - name: ID
          in: query
          description: The ID of the person
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK, entity edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Not found

components:
  schemas:
    BasePassportModel:
      type: object
      description: Abstract passport model
      properties:
        passportType:
          type: string
          enum: [RFPassport, ForeignRFPassport, NonRFPassport]
        ID:
          type: string
          description: Internal passport ID
        personID:
          type: string
          description: Person ID
        number:
          type: string
          description: 6 digits for RF passport, required for all passport types
        givenDate:
          type: string
          description: Date when the passport is given. Will be set to today's date if not provided
          format: date
        givenDepartment:
          type: string
          description: The department where the passport is given
        otherPassports:
          type: array
          description: The other related passports list as array
          items:
            oneOf:
              - $ref: '#/components/schemas/RFPassport'
              - $ref: '#/components/schemas/ForeignRFPassport'
              - $ref: '#/components/schemas/NonRFPassport'
          uniqueItems: true
        isActive:
          type: boolean
          description: Indicates if the passport is active
      required:
        - passportType

    RFPassport:
      allOf:
        - $ref: '#/components/schemas/BasePassportModel'
        - type: object
          description: Passport data
          properties:
            series:
              type: string
              description: 4 digits for RF passport
              pattern: '\d{4}'
            number:
              type: string
              description: 6 digits for RF passport
              pattern: '\d{6}'
            givenDepartmentCode:
              type: string
              description: The number of the department code where the passport is given
              example: 120-450
              pattern: '\d{3}-\d{3}'
            registrationData:
              $ref: '#/components/schemas/RegistrationData'

    ForeignRFPassport:
      allOf:
        - $ref: '#/components/schemas/BasePassportModel'
        - type: object
          description: RF foreign passport
          properties:
            expirationDate:
              type: string
              description: Passport expirationDate
              example: 13.12.1423
              format: date

    NonRFPassport:
      allOf:
        - $ref: '#/components/schemas/BasePassportModel'
        - type: object
          description: Non RF Passport
          properties:
            country:
              type: string
              description: Country in which the passport is given

    PassportsList:
      type: array
      items:
        oneOf:
          - allOf:
              - $ref: '#/components/schemas/RFPassport'
              - type: object
                required:
                  - number
                  - person
                  - personID
                  - givenDepartment
                  - series
                  - givenDepartmentCode
          - allOf:
              - $ref: '#/components/schemas/ForeignRFPassport'
              - type: object
                required:
                  - number
                  - person
                  - personID
                  - givenDepartment
                  - expirationDate
          - allOf:
              - $ref: '#/components/schemas/NonRFPassport'
              - type: object
                required:
                  - number
                  - person
                  - personID
                  - givenDepartment
                  - country
        discriminator:
          propertyName: passportType
          mapping:
            RFPassport: '#/components/schemas/RFPassport'
            ForeignRFPassport: '#/components/schemas/ForeignRFPassport'
            NonRFPassport: '#/components/schemas/NonRFPassport'
      uniqueItems: true

    Passport:
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/RFPassport'
            - type: object
              required:
                - number
                - person
                - personID
                - givenDepartment
                - series
                - givenDepartmentCode
        - allOf:
            - $ref: '#/components/schemas/ForeignRFPassport'
            - type: object
              required:
                - number
                - person
                - personID
                - givenDepartment
                - expirationDate
        - allOf:
            - $ref: '#/components/schemas/NonRFPassport'
            - type: object
              required:
                - number
                - person
                - personID
                - givenDepartment
                - country
      discriminator:
        propertyName: passportType
        mapping:
          RFPassport: '#/components/schemas/RFPassport'
          ForeignRFPassport: '#/components/schemas/ForeignRFPassport'
          NonRFPassport: '#/components/schemas/NonRFPassport'

    RegistrationData:
      type: object
      description: The information about person's place of registration
      properties:
        registrationAddress:
          type: string
          description: Address of registration
        registrationDate:
          type: string
          description: Date of registration
          format: date
        registrationDepartment:
          type: string
          description: Department of registration
        previousRegistrations:
          type: array
          description: The list of previous registrations
          items:
            $ref: '#/components/schemas/RegistrationData'
      required:
        - registrationAddress
        - registrationDate
        - registrationDepartment

    Person:
      type: object
      description: Person info
      properties:
        ID:
          type: string
          description: Internal person ID
        name:
          type: string
          description: Person's Name
        surname:
          type: string
          description: Person's surname
        patronymic:
          type: string
          description: Person's patronymic
        placeOfBirth:
          type: string
          description: Person's place of birth
        dateOfBirth:
          type: string
          description: Person's date of birth
          example: 14.03.1423
          format: date
        dateOfDeath:
          type: string
          description: Person's date of death
          example: 14.03.1423
          format: date

  responses:
    InvalidData:
      description: Provided data is invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              errorID:
                type: string
                description: The ID if the error to provide to the helpDesk
              entityName:
                type: string
                description: The name of the entity which occurs the error
              propertyName:
                type: string
                description: The name of the property which occurs the error
              errorDescription:
                type: string
                description: The human-reliable description of the error
              errorCode:
                type: string
                description: The error code which encrypts the error, entityName and propertyName

  #  ReturnPassport:
  #    description: OK, accepted
  #    content:
  #      application/json:
  #        schema:
  #          oneOf:
  #            - $ref: '#/components/schemas/RFPassport'
  #            - $ref: '#/components/schemas/ForeignRFPassport'
  #            - $ref: '#/components/schemas/NonRFPassport'
  #          discriminator:
  #            propertyName: passportType
  #            #mapping:
  #             # RFPassport: '#/components/schemas/RFPassport'
  #             # ForeignRFPassport: '#/components/schemas/ForeignRFPassport'
  #              #NonRFPassport: '#/components/schemas/NonRFPassport'
  #  ReturnPassports:
  #    description: OK, accepted
  #    content:
  #      application/json:
  #        schema:
  #          type: array
  #          items:
  #            oneOf:
  #              - $ref: '#/components/schemas/RFPassport'
  #              - $ref: '#/components/schemas/ForeignRFPassport'
  #              - $ref: '#/components/schemas/NonRFPassport'
  #            discriminator:
  #              propertyName: passportType

  #requestBodies:
  #  PostPassport:
  #    required: true
  #    content:
  #      application/json:
  #        schema:
  #          oneOf:
  #              - $ref: '#/components/schemas/RFPassport'
  #              - $ref: '#/components/schemas/ForeignRFPassport'
  #              - $ref: '#/components/schemas/NonRFPassport'