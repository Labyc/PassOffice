openapi: 3.0.1
info:
  title: Passport office API
  description: This is a Passport office API.
  version: 1.0.0

servers:
  - url: 'http://192.168.37.200:8090'
    description: base server
tags:
  - name: Passport
    description: get/add/switch/inactivate passport
  - name: Search
    description: Search for passport or Person
  - name: Person
    description: get/add/edit/delete Person info
  - name: Healthcheck

paths:
  /healthCheck:
    get:
      tags:
        - Healthcheck
      summary: Check API server is OK
      responses:
        '200':
          description: OK
        '500':
          description: internal service error
        '400':
          description: not reachable

  /person/{personId}/passports:
    get:
      tags:
        - Search
      summary: Get passports by person's ID
      parameters:
        - name: personID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportsListOut'
        '404':
          description: Not found

  /person/byBirthDate:
    get:
      tags:
        - Search
      summary: Get persons by birth date range/ name
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Will be set to today's date if not provided
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonOut'
        '404':
          description: Not found

  /person/byName:
    get:
      tags:
        - Search
      summary: Get persons by birth date range/ name
      parameters:
        - name: personsName
          in: query
          required: true
          schema:
            type: string
        - name: secondName
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonOut'
        '404':
          description: Not found

  /person:
    post:
      tags:
        - Person
      summary: add one person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PersonIn'
                - type: object
                  required:
                    - name
                    - surname
                    - placeOfBirth
                    - dateOfBirth
      responses:
        '200':
          description: OK, entity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonOut'
        '400':
          $ref: '#/components/responses/InvalidDataSyntax'
        '422':
          $ref: '#/components/responses/InvalidData'

  /person/{id}:
    patch:
      tags:
        - Person
      summary: edit one person
      parameters:
        - name: id
          in: path
          description: The ID of the person
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonIn'
      responses:
        '200':
          description: OK, entity updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonOut'
        '404':
          description: Not found
        '400':
          $ref: '#/components/responses/InvalidDataSyntax'
        '422':
          $ref: '#/components/responses/InvalidData'

    put:
      tags:
        - Person
      summary: edit one person
      parameters:
        - name: id
          in: path
          description: The ID of the person
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PersonIn'
                - type: object
                  required:
                    - name
                    - surname
                    - placeOfBirth
                    - dateOfBirth
      responses:
        '200':
          description: OK, entity updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonOut'
        '404':
          description: Not found
        '400':
          $ref: '#/components/responses/InvalidDataSyntax'
        '422':
          $ref: '#/components/responses/InvalidData'
    get:
      tags:
        - Person
      summary: get person by id
      parameters:
        - name: id
          in: path
          description: The ID of the person
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonOut'
        '404':
          description: Not found
    delete:
      tags:
        - Person
      summary: Delete person
      parameters:
        - name: id
          in: path
          description: The ID of the person
          required: true
          schema:
            type: string
      responses:
        '204':
          description: OK, entity deleted
        '404':
          description: Not found

  /passport:
    post:
      tags:
        - Passport
      summary: Add one new passport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassportIn'
      responses:
        '200':
          description: OK entity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportOut'
        '400':
          $ref: '#/components/responses/InvalidDataSyntax'
        '422':
          $ref: '#/components/responses/InvalidData'

  /passport/{passportId}:
    post:
      tags:
        - Passport
      summary: Post new passport instead of old one with the same data
      parameters:
        - name: id
          in: query
          description: Internal passport ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok, entity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportOut'
        '404':
          description: Old Passport not found
    patch:
      tags:
        - Passport
      summary: Edit passport
      parameters:
        - name: passportId
          in: path
          required: true
          description: Old passport ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassportIn'
      responses:
        '200':
          description: OK, entity updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportOut'
        '404':
          description: Not found
        '400':
          $ref: '#/components/responses/InvalidDataSyntax'
        '422':
          $ref: '#/components/responses/InvalidData'

    get:
      tags:
        - Passport
      summary: Returns one passport
      parameters:
        - name: passportId
          in: path
          description: Passport ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassportOut'
        '404':
          description: Not found

    delete:
      tags:
        - Passport
      summary: Delete passport by series and number
      parameters:
        - name: passportId
          in: path
          description: Passport ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: OK, entity deleted
        '404':
          description: Not found


components:
  schemas:
    BasePassportModelIn:
      type: object
      description: Abstract passport model
      properties:
        passportType:
          type: string
          enum: [RF_PASSPORT, FOREIGN_RF_PASSPORT, NON_RF_PASSPORT]
        personID:
          type: string
          description: Person ID
        number:
          type: string
          description: 6 digits for RF passport, required for all passport types
        givenDate:
          type: string
          description: Date when the passport is given. Will be set to today's date if not provided
          format: date
        givenDepartment:
          type: string
          description: The department where the passport is given
        otherPassportsIds:
          type: array
          description: The other related passport ids list as array
          items:
            type: string
            description: internal passportId
          uniqueItems: true
      required:
        - passportType
        - personID
        - givenDepartment
        - number

    BasePassportModelOut:
      type: object
      description: Abstract passport model
      properties:
        passportType:
          type: string
          enum: [ RF_PASSPORT, FOREIGN_RF_PASSPORT, NON_RF_PASSPORT ]
        id:
          type: string
          description: Internal passport ID
        personID:
          type: string
          description: Person ID
        number:
          type: string
          description: 6 digits for RF passport, required for all passport types
        givenDate:
          type: string
          description: Date when the passport is given. Will be set to today's date if not provided
          format: date
        givenDepartment:
          type: string
          description: The department where the passport is given
        otherPassportsIds:
          type: array
          description: The other related passport ids list as array
          items:
            type: string
            description: internal passportId
          uniqueItems: true
        isActive:
          type: boolean
          description: Indicates if the passport is active
      required:
        - passportType
        - id
        - personID
        - number
        - givenDate
        - givenDepartment
        - isActive

    RFPassportIn:
      allOf:
        - $ref: '#/components/schemas/BasePassportModelIn'
        - type: object
          description: Passport data
          properties:
            series:
              type: string
              description: 4 digits for RF passport
              pattern: '\d{4}'
            number:
              type: string
              description: 6 digits for RF passport
              pattern: '\d{6}'
            givenDepartmentCode:
              type: string
              description: The number of the department code where the passport is given
              example: 120-450
              pattern: '\d{3}-\d{3}'
            registrationData:
              $ref: '#/components/schemas/RegistrationData'
          required:
            - series

    RFPassportOut:
      allOf:
        - $ref: '#/components/schemas/BasePassportModelOut'
        - type: object
          description: Passport data
          properties:
            series:
              type: string
              description: 4 digits for RF passport
              pattern: '\d{4}'
            number:
              type: string
              description: 6 digits for RF passport
              pattern: '\d{6}'
            givenDepartmentCode:
              type: string
              description: The number of the department code where the passport is given
              example: 120-450
              pattern: '\d{3}-\d{3}'
            registrationData:
              $ref: '#/components/schemas/RegistrationData'
          required:
            - series
            - givenDepartmentCode

    ForeignRFPassportIn:
      allOf:
        - $ref: '#/components/schemas/BasePassportModelIn'
        - type: object
          description: RF foreign passport
          properties:
            expirationDate:
              type: string
              description: Passport expirationDate
              format: date
          required:
            - expirationDate

    ForeignRFPassportOut:
      allOf:
        - $ref: '#/components/schemas/BasePassportModelOut'
        - type: object
          description: RF foreign passport
          properties:
            expirationDate:
              type: string
              description: Passport expirationDate
              format: date
          required:
            - expirationDate

    NonRFPassportIn:
      allOf:
        - $ref: '#/components/schemas/BasePassportModelIn'
        - type: object
          description: Non RF Passport
          properties:
            country:
              type: string
              description: Country in which the passport is given
          required:
            - country

    NonRFPassportOut:
      allOf:
        - $ref: '#/components/schemas/BasePassportModelOut'
        - type: object
          description: Non RF Passport
          properties:
            country:
              type: string
              description: Country in which the passport is given
          required:
            - country

    PassportsListOut:
      type: array
      items:
        $ref: '#/components/schemas/PassportOut'
      uniqueItems: true

    PassportIn:
      oneOf:
        - $ref: '#/components/schemas/RFPassportIn'
        - $ref: '#/components/schemas/ForeignRFPassportIn'
        - $ref: '#/components/schemas/NonRFPassportIn'
      discriminator:
        propertyName: passportType
        mapping:
          RFPassport: '#/components/schemas/RFPassportIn'
          ForeignRFPassport: '#/components/schemas/ForeignRFPassportIn'
          NonRFPassport: '#/components/schemas/NonRFPassportIn'

    PassportOut:
      oneOf:
        - $ref: '#/components/schemas/RFPassportOut'
        - $ref: '#/components/schemas/ForeignRFPassportOut'
        - $ref: '#/components/schemas/NonRFPassportOut'
      discriminator:
        propertyName: passportType
        mapping:
          RFPassport: '#/components/schemas/RFPassportOut'
          ForeignRFPassport: '#/components/schemas/ForeignRFPassportOut'
          NonRFPassport: '#/components/schemas/NonRFPassportOut'

    RegistrationData:
      type: object
      description: The information about person's place of registration
      properties:
        internalRegistrationId:
          type: string
          description: Internal Registration Id
        registrationAddress:
          type: string
          description: Address of registration
        registrationStartDate:
          type: string
          description: Date of registration starts
          format: date
        registrationEndDate:
          type: string
          description: Date of registration ends
          format: date
        registrationDepartment:
          type: string
          description: Department of registration
      required:
        - registrationAddress
        - registrationDate
        - registrationDepartment

    PersonIn:
      type: object
      description: Person info
      properties:
        name:
          type: string
          description: Person's Name
        surname:
          type: string
          description: Person's surname
        patronymic:
          type: string
          description: Person's patronymic
        placeOfBirth:
          type: string
          description: Person's place of birth
        dateOfBirth:
          type: string
          description: Person's date of birth
          format: date
        dateOfDeath:
          type: string
          description: Person's date of death
          format: date

    PersonOut:
      type: object
      description: Person info
      properties:
        id:
          type: string
          description: Internal person ID
        name:
          type: string
          description: Person's Name
        surname:
          type: string
          description: Person's surname
        patronymic:
          type: string
          description: Person's patronymic
        placeOfBirth:
          type: string
          description: Person's place of birth
        dateOfBirth:
          type: string
          description: Person's date of birth
          format: date
        dateOfDeath:
          type: string
          description: Person's date of death
          format: date
      required:
        - id
        - name
        - surname
        - placeOfBirth
        - dateOfBirth

  responses:
    InvalidDataSyntax:
      description: Provided data syntax is invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              errorID:
                type: string
                description: The ID if the error to provide to the helpDesk
              errorDescription:
                type: string
                description: The human-reliable description of the error
              errorCode:
                type: string
                description: The error code which encodes the error, entityName and propertyName
            required:
              - errorID
              - errorDescription
              - errorCode

    InvalidData:
      description: Provided data is invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              errorID:
                type: string
                description: The ID if the error to provide to the helpDesk
              errorDescription:
                type: string
                description: The human-reliable description of the error
              errorCode:
                type: string
                description: The error code which encodes the error, entityName and propertyName
            required:
              - errorID
              - errorDescription
              - errorCode

    Error404:
      description: Entity not found
      content:
        application/json:
          schema:
            type: string
            description: ErrorId
            required: true
